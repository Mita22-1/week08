name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External URL for Product API (e.g., http://20.11.77.52:8000)'
        required: true
        default: 'http://<ip>:8000'
      order_api_ip:
        description: 'External URL for Order API (e.g., http://4.254.15.75:8001)'
        required: true
        default: 'http://<ip>:8001'
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'sit722-aks'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'sit722-task8-rg'

  workflow_call:
    inputs:
      product_api_ip:     { required: true, type: string }
      order_api_ip:       { required: true, type: string }
      aks_cluster_name:   { required: true, type: string }
      aks_resource_group: { required: true, type: string }

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # IMPORTANT: registry **name** here (no .azurecr.io)
      - name: Login to ACR
        run: az acr login --name "${{ secrets.AZURE_ACR_NAME }}"

      - name: Inject backend URLs into frontend/main.js
        shell: bash
        run: |
          set -e
          test -f frontend/main.js || { echo "::error ::frontend/main.js missing"; exit 1; }
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          echo " ----- main.js after injection -----"
          tail -n +1 frontend/main.js | sed -n '1,50p'

      - name: Build & push frontend image
        shell: bash
        run: |
          set -e
          docker build \
            -f frontend/Dockerfile \
            -t "${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest" \
            ./frontend
          docker push "${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest"

      - name: Set kubectl context to AKS
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:   ${{ inputs.aks_cluster_name }}

      - name: Deploy frontend Service/Deployment
        shell: bash
        run: |
          set -e
          kubectl apply -f k8s/frontend.yaml
          kubectl rollout status deployment/frontend-deploy -w --timeout=180s
          kubectl get svc,deploy,pods -o wide

      - name: Logout Azure
        if: always()
        run: az logout
